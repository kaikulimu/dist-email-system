#include "header.h"
#include "clientSpreadUtil.h"
#include "client.h"

using namespace std;


Client::Client(ClientSpreadUtil *sp) : spreadUtil(sp) {
    spreadUtil->set_observer(this);
    spreadUtil->handle_events();
}

void Client::login(const string user_name_) {
    user_name = user_name_;
    cout << "==> You have logged in as " << user_name << endl;
}


void Client::connect_server(const uint server_id_) {
    // User name must not be empty
    if (user_name.empty()) {
        printf("Failed to connect to server. User name is empty\n");
        return;
    }
    server_id = server_id_;
    spreadUtil->connect_new_server(server_id_);
}

void Client::request_all_mails() {
    if(server_id < 0){
        cout << "==> Please connect to a server first\n";
    }else{
        myMails.clear();
        ClientCommand msg('l', user_name);
        spreadUtil->unicast_server(&msg);
    }
}

void Client::print_all_mails() {
    if (myMails.empty()) {
        cout << "\n==> " << user_name << ", you have no email at server " << server_id << endl;
    } else {
        cout << "\n==> " << user_name << ", your email at server " << server_id << " (* means unread):\n";
        sort(myMails.begin(), myMails.end(), [](MailInterface* m1, MailInterface* m2){
            if(m1->timestamp > m2->timestamp){
                return true;
            }else if(m1->timestamp < m2->timestamp){
                return false;
            }else{
                return m1->byServer > m2->byServer;
            }
        });
        for (size_t i = 0; i < myMails.size(); ++i) {
            // Show index starting from 1 for Yair
            cout << "==> [" << i + 1 << "] " << myMails[i]->to_preview() << endl;
        }
    }

}

void Client::view_partition() {
    if(server_id < 0){
        cout << "==> Please connect to a server first\n";
    }else {
        // Send command to the server
        ClientCommand msg('v');
        spreadUtil->unicast_server(&msg);
    }
}

void Client::read_mail(size_t idx) {
    if (idx >= myMails.size()) {
        cout << "Error: out of range index\n";
    } else {
        cout << "==> Reading mail " << idx + 1 << endl;
        CommonMail *m = myMails.at(idx);
        cout << "From: " << m->fromUser << endl
             << "Subject: " << m->subject << endl
             << m->body << endl;
        MarkMail mm(m->byServer, m->index, false, true);
        spreadUtil->unicast_server(&mm);
    }
}

void Client::delete_mail(size_t idx) {
    if (idx >= myMails.size()) {
        cout << "Error: out of range index\n";
    } else {
        cout << "==> Deleting mail " << myMails.at(idx)->to_preview() << endl;
        CommonMail *m = myMails.at(idx);
        MarkMail mm(m->byServer, m->index, true, false);
        spreadUtil->unicast_server(&mm);
        myMails.erase(myMails.begin() + idx);
        cout << "==> Mail deleted. Please press 'l' to refresh mail list\n";
    }
}

void Client::sendMail() {
    if(server_id < 0){
        cout << "==> Please connect to a server first\n";
    }else {
        // Construct a common mail message and send it to the server
        CommonMail msg("");
        msg.fromUser = user_name;
        cout << "to:";
        cin >> msg.toUser;
        cin.ignore(); // Ignore the extra char generated by cin extraction
        cout << "subject:";
        getline(cin, msg.subject);
        cout << "body:";
        getline(cin, msg.body);
        cout << "==> Send mail: " << msg.to_preview() << endl;
        spreadUtil->unicast_server(&msg);
    }
}

void Client::notifyServerInformation(const string info) {
    cout << "==> Spread says: " << info << endl;
}

void Client::notifyDisconnect() {
    server_id = -1;
}

void Client::notifyMessage(MessageInterface *msg) {
    switch (msg->type) {
        case CommonMailType: {
            myMails.push_back(static_cast<CommonMail *>(msg));
            break;
        }
        case MemberListType: {
            cout << "==> In this partition: " << msg->to_preview() << endl;
            break;
        }
        case ClientCommandType: {
            string cmd = static_cast<ClientCommand *>(msg)->cmd;
            string data = static_cast<ClientCommand *>(msg)->data;
            if (data == "finished") {
                print_all_mails();
            } else {

            }
            break;
        }
        default:
            throw runtime_error("Client should not receive this message type: " + to_string(msg->type));
    }
}

void Client::notifyUserCommand(string cmd) {
    vector<string> fields = split(cmd);
    auto assert2 = [cmd, fields]() {
        if (fields.size() == 2) {
            return true;
        } else {
            cout << "Error: Unknown commnad: " + cmd + "\n";
            return false;
        }
    };
    if (fields.empty() || fields.size() > 2) {
        cout << "Error: Unknown commnad: " + cmd + "\n";
    } else {
        string mode = fields[0];
        if (mode == "u") { // Login with a user name.
            if (assert2()) {
                login(fields[1]);
            }
        } else if (mode == "c") { // Connecting to a specific mail server.
            if (assert2()) {
                connect_server(stoul(fields[1]));
            }
        } else if (mode == "l") { // List the headers of received mail.
            request_all_mails();
        } else if (mode == "m") { // Send a new mail
            sendMail();
        } else if (mode == "d") { // Delete a mail message.
            if (assert2()) {
                delete_mail(stoul(fields[1]) - 1);
            }
        } else if (mode == "r") { // Read a mail message.
            if (assert2()) {
                read_mail(stoul(fields[1]) - 1);
            }
        } else if (mode == "v") {
            // Print the membership of the mail servers in the current mail server's network component.
            view_partition();
        } else if (mode == "x") {
            // Send debugging information to the server
            if (assert2()) {
                ClientCommand cc('x', fields[1]);
                spreadUtil->unicast_server(&cc);
            }
        } else {
            cout << "\nUnknown commnad\n";
        }
    }
}


int main(int argc, char *argv[]) {
    if (argc != 1) exit_with("Usage: client\n");

    ClientSpreadUtil &sp = ClientSpreadUtil::getInstance();
    Client client(&sp);

    return 0;

}


